feature_input | (<tf.Tensor 'input/Placeholder:0' shape=(?, ?, 39) dtype=float32>,)

output | (<tf.Tensor 'decoder/CTCGreedyDecoder:0' shape=(?, 2) dtype=int64>, <tf.Tensor 'decoder/CTCGreedyDecoder:1' shape=(?,) dtype=int64>, <tf.Tensor 'decoder/CTCGreedyDecoder:2' shape=(2,) dtype=int64>, <tf.Tensor 'decoder/CTCGreedyDecoder:3' shape=(?, 1) dtype=float32>)

# !/usr/local/bin/python
import tensorflow as tf
import os
import numpy as np
import glob
import sys,argparse
import librosa
import librosa.feature as lib_feat
#PARAMS#
num_mfccs = 13

__file = sys.argv[1]

def features(rawsnd,num):
    x, sample_rate = librosa.load(rawsnd, sr=16000)
    #s_tft = np.abs(librosa.stft(x))
    ft = lib_feat.mfcc(y=x, sr=sample_rate, n_mfcc=num, n_fft=int(sample_rate*0.025), hop_length=int(sample_rate*0.010)).T
    #ft = lib_feat.melspectrogram(y=x, sr=sample_rate, n_fft=1024, hop_length=256, power=1.0).T
    t_ft = ft
    ft = np.append(ft,lib_feat.delta(t_ft),axis=1)
    ft = np.append(ft,lib_feat.delta(t_ft,order=2),axis=1)
    ft /= np.max(np.abs(ft),axis=0)
    return (ft)

dat=features(__file,num_mfccs)
print(dat)

savepath = 'best_chkpt'

sess=tf.Session()

saver = tf.train.import_meta_graph(graph_dir)

if os.path.exists(savepath):
    saver.restore(sess, savepath+'/model.ckpt')

graph = tf.get_default_graph()
op = sess.graph.get_operations()
inp = graph.get_tensor_by_name("input/Placeholder:0")

feed_dict = {inputs: batch_test_inputs,targets: batch_test_targets,seq_len: batch_test_seq_len,training: False}

out = graph.get_tensor_by_name("decoder/CTCGreedyDecoder:0")
print sess.run(out,feed_dict)

